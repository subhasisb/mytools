#!/bin/bash

. ${PBS_CONF_FILE:-/etc/pbs.conf}

function usage() {
	echo "syntax: $0 <create> [jobuser] [num-moms] [num-cpus-per-mom]"
	echo "syntax: $0 <createcon> [jobuser] [num-moms] [num-cpus-per-mom]"
	echo "syntax: $0 <remove>"
}

if [ $# -lt 1 ]; then
	usage
	exit 1
fi

docker_present=0
docker --version > /dev/null 2>&1
if [ $? -eq 0 ]; then
	docker_present=1
fi

if [ "$1" = "create" -o  "$1" = "createcon" ]; then
	if [ $# -lt 4 ]; then
		usage
		exit 1
	fi
	jobuser=$2
	num=$3
	cpus=$4
	echo "Creating $num containers/moms each with $cpus cores and adding user $jobuser"
	echo "====================================================================="
elif [ "$1" = "remove" ]; then
	if [ $# -ne 1 ]; then
		usage
		exit 1
	fi
else
	usage
	exit 1
fi

if [ "$1" = "create" ]; then
	echo "Running in NON-CONTAINER mode"
	cont=0
elif [ "$1" = "createcon" ]; then
	echo "Running in CONTAINER mode"
	cont=1
	if [ $docker_present -eq 0 ]; then
		echo "Docker not installed!! Exiting..."
		exit 1
	fi
fi

pbs_home=$PBS_HOME
pbs_newhome=`dirname $pbs_home`
if [ -z "$pbs_newhome" ]; then 
	echo "Could not detect new home"
	exit 1
fi

if [ ! -d "$pbs_newhome" ]; then 
	echo "$pbs_newhome is not a directory"
	exit 1
fi

if [ "$pbs_newhome" = "/" ]; then
	echo "pbs_newhome resolves to /. Cannot work"
	exit 1
fi

mom_name=`hostname`
_shost=$(hostname -s)
_sm=$(pwd)/start_mom

if [ $docker_present -eq 1 ]; then
	containers=`docker ps -a | grep pbsmom | awk '{print $1}'` 
	if [ ! -z "${containers}" ]; then
		echo "Removing existing containers..."
		docker stop `docker ps -a | grep pbsmom | awk '{print $1}'`
		docker rm `docker ps -a | grep pbsmom | awk '{print $1}'`
	fi
fi
rm -rf $pbs_newhome/mom*
pkill pbs_mom


echo "Deleting existing nodes..."
/opt/pbs/bin/qmgr -c "d n @default" > /dev/null 2>&1

if [ "$1" = "remove" ]; then
	echo "Done"
	exit 0
fi

if [ $cont -eq 1 ]; then
	docker build . --build-arg JOBUSER=$jobuser -t pbs:mom
fi

for i in $(seq 1 1 $num)
do
	_port=$((18000 + (i * 2)))
	if [ $cont -eq 1 ]; then
		echo "Creating container at ${_shost} ${_port} with name pbsmom_$i"
		docker run -dit --privileged --net=host -v /opt/pbs:/opt/pbs -v ${_sm}:/start_mom --name pbsmom_$i --entrypoint /start_mom pbs:mom ${_shost} ${_port}
		/opt/pbs/bin/qmgr -c "c n mom-${i} mom=${_shost},port=${_port}"
	else
		mom_home=$pbs_newhome/mom$i
		conf_file=$mom_home/pbs.conf
		mom_conf=$mom_home/mom_priv/config

		echo "Creating mom_home $pbs_newhome/mom$i"
		mkdir $mom_home > /dev/null 2>&1
		cp -r -p $pbs_home/aux $mom_home
		cp -r -p $pbs_home/checkpoint $mom_home
		cp -r -p $pbs_home/mom_logs $mom_home
		cp -r -p $pbs_home/pbs_environment $mom_home
		cp -r -p $pbs_home/mom_priv $mom_home
		cp -r -p $pbs_home/spool $mom_home
		cat /etc/pbs.conf > $conf_file

		echo "PBS_MOM_SERVICE_PORT=${_port}" >> $conf_file
		echo "PBS_MANAGER_SERVICE_PORT=`expr ${_port} + 1`" >> $conf_file
		echo "PBS_HOME=$mom_home" >> $conf_file
		sed "s/mom/mom-${i}/g" simple_nodedef > out
		${PBS_EXEC}/bin/qmgr -c "c n mom-${i} mom=${mom_name},port=${_port}"
		#PBS_CONF_FILE=$conf_file ${PBS_EXEC}/sbin/pbs_mom -s insert vnodefile out 
		#PBS_CONF_FILE=$conf_file valgrind --tool=helgrind --log-file=/tmp/val_$i ${PBS_EXEC}/sbin/pbs_mom -N > /tmp/mom$i.out 2>&1 &
		PBS_CONF_FILE=$conf_file ${PBS_EXEC}/sbin/pbs_mom -N > /tmp/mom$i.out 2>&1 &
	fi
	echo ""
	/opt/pbs/bin/qmgr -c "s n mom-${i} resources_available.ncpus = $cpus"
done
echo "Done"
